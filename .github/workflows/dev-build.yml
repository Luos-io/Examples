name: Dev-Build

on:
  push:
    branches-ignore:
      - master

jobs:

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
        - os: windows-latest
          pio_lib_path: D:\a\Examples
        - os: macos-latest
          pio_lib_path: ~/work/Examples
        - os: ubuntu-latest
          pio_lib_path: ~/work/Examples

    steps:
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Set up Node
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        npm install -g clang-format

    - name: Check out Luos repository
      uses: actions/checkout@v2

    - name: Check for code format
      if: ${{ runner.os != 'Windows' }}
      run: python .github/workflows/run-clang-format.py -r .

    - name: Create env repo
      shell: bash
      run: |
        # Save branch name
        branch_name=$(git branch --show-current)
        origine_branch_name="origin/${branch_name}"
        echo current branch name is ${branch_name}

        # Step back and get dependancies
        cd ..

        # LuosHAL
        git clone https://github.com/Luos-io/LuosHAL.git
        cd LuosHAL
        if [ `git branch -r --list $origine_branch_name` ]
        then
          echo A dependant branch have been found on LuosHAL
          git checkout $branch_name
          cd ..
        else
          echo Use last release of LuosHAL
          cd ..
          rm -rf LuosHAL
        fi

        # Luos
        git clone https://github.com/Luos-io/Luos.git
        cd Luos
        if [ `git branch -r --list $origine_branch_name` ]
        then
          echo A dependant branch have been found on Luos
          git checkout $branch_name
          cd ..
        else
          echo Use last release of Luos
          cd ..
          rm -rf Luos
        fi

    - name: Run PlatformIO
      env:
        PLATFORMIO_LIB_EXTRA_DIRS: ${{ matrix.pio_lib_path }}
      run: |
        # L0
        platformio run -d Projects/l0/Button
        platformio run -d Projects/l0/Controller_motor
        platformio run -d Projects/l0/Dc_motor
        platformio run -d Projects/l0/Distance
        platformio run -d Projects/l0/Dxl
        platformio run -d Projects/l0/Gate_SerialCom
        platformio run -d Projects/l0/Gpio
        platformio run -d Projects/l0/Imu
        platformio run -d Projects/l0/Led
        platformio run -d Projects/l0/Led_strip
        platformio run -d Projects/l0/Light_sensor
        platformio run -d Projects/l0/Load
        platformio run -d Projects/l0/Potentiometer
        platformio run -d Projects/l0/Power_switch
        platformio run -d Projects/l0/Servo
        platformio run -d Projects/l0/Stepper
        platformio run -d Projects/l0/Bike_alarm/Alarm_controller
        platformio run -d Projects/l0/Bike_alarm/Start_controller
        # arduino
        platformio run -d Projects/Arduino/Button
        platformio run -d Projects/Arduino/Gate_SerialCom
        # NUCLEO-L432KC
        platformio run -d Projects/NUCLEO-L432KC/Button
        platformio run -d Projects/NUCLEO-L432KC/Gate_SerialCom
        platformio run -d Projects/NUCLEO-L432KC/Led
        # STM32F4-discovery
        platformio run -d Projects/STM32F4-discovery/Button
        platformio run -d Projects/STM32F4-discovery/Gate_SerialCom
        # NUCLEO-F401RE
        platformio run -d Projects/NUCLEO-F401RE/Button
        platformio run -d Projects/NUCLEO-F401RE/Gate_SerialCom
        platformio run -d Projects/NUCLEO-F401RE/Led
        # NUCLEO-F401RB
        platformio run -d Projects/NUCLEO-F410RB/Button
        platformio run -d Projects/NUCLEO-F410RB/Gate_SerialCom
        # NUCLEO-G431KB
        platformio run -d Projects/NUCLEO-G431KB/Button
        platformio run -d Projects/NUCLEO-G431KB/Gate_SerialCom
